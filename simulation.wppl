// webppl sequential.wppl --require webppl-csv

var params = {
  beta: 1,
  comfort_discount: 1, // how much do you value partner's comfort relative to your own?
  participants: 300,
  roles: ["alice", "bob"],
  n_rounds: 20,
  closenesses: [1, 2, 3, 4],
  action_risks: [1, 2, 3],
};

// comfort for each scenario, based on closeness and risk
var comfort = function (scenario, closeness, risk) {
  // format: scenario -> closeness -> risk -> comfort
  // closeness is 1-4 (not close -> extremely close), risk is 1-3 (low -> high)
  var scenarios = {
    mac: {
      1: { 1: 5, 2: 3.5, 3: 2.5 },
      2: { 1: 5.5, 2: 4.5, 3: 3.5 },
      3: { 1: 6, 2: 5, 3: 4.5 },
      4: { 1: 6, 2: 5.8, 3: 5.7 },
    },
  };

  return scenarios[scenario][closeness][risk];
};

var closeness_prior = Categorical({
  vs: params.closenesses,
  ps: [0.25, 0.25, 0.25, 0.25],
});

// base actor
var base_actor = function (scenario, closeness_A, closeness_R) {
  return Infer({ method: "enumerate" }, function () {
    var action_risk = uniformDraw([1, 2, 3]); // prior on actions
    var U_comfort_A = comfort(scenario, closeness_A, action_risk);
    var U_comfort_R = comfort(scenario, closeness_R, action_risk);
    factor(params.beta * (U_comfort_A + params.comfort_discount * U_comfort_R));
    return { action_risk: action_risk };
  });
};

// base receiver sees an action and infers closeness
var base_receiver = function (scenario, closeness_R, beliefs, action_risk) {
  return Infer({ method: "enumerate" }, function () {
    var closeness_A = sample(beliefs);
    observe(base_actor(scenario, closeness_A, closeness_R), {
      action_risk: action_risk,
    });
    return { closeness_A: closeness_A };
  });
};

var comm_actor = function (scenario, closeness_A, beliefs) {
  return Infer({ method: "enumerate" }, function () {
    var closeness_R = sample(beliefs);
    var action_risk = uniformDraw([1, 2, 3]); // prior on actions
    var U_comfort_A = comfort(scenario, closeness_A, action_risk);
    var U_comfort_R = comfort(scenario, closeness_R, action_risk);
    factor(
      params.beta *
        (U_comfort_A +
          params.comfort_discount * U_comfort_R +
          0.1 * base_receiver(scenario, closeness_R, beliefs, action_risk).score({
            closeness_A: closeness_A,
          }))
    );
    return { action_risk: action_risk };
  });
};

// based on all the actions so far, update beliefs about closeness

var update_posterior = function (scenario, closeness_R, beliefs, actionsSoFar) {
  return Infer({ method: "enumerate" }, function () {
    var closeness_A = sample(beliefs);
    // console.log(closeness_A);

    mapData({ data: actionsSoFar }, function (action) {
    //   observe(base_actor(scenario, closeness_A, closeness_R), {
    //     action_risk: action,
    //   });

      observe(comm_actor(scenario, closeness_A, closeness_prior), {
        action_risk: action,
      });
    });

    return { closeness_A: closeness_A };
  });
};

var conditions = _.flattenDeep(
  map(function (closeness_alice) {
    return map(function (closeness_bob) {
      return {
        closeness_alice: closeness_alice,
        closeness_bob: closeness_bob,
      };
    }, params.closenesses);
  }, params.closenesses)
);

var run = function (scenario, condition, dataSoFar) {
  var alice_priors = closeness_prior;
  var bob_priors = closeness_prior;

  var alice_posterior = marginalize(
    update_posterior(
      scenario,
      condition.closeness_alice,
      alice_priors,
      dataSoFar.bob_actions
    ),
    "closeness_A"
  );
  var alice_action = sample(
    comm_actor(scenario, condition.closeness_alice, alice_posterior)
  );

  var bob_posterior = marginalize(
    update_posterior(
      scenario,
      condition.closeness_bob,
      bob_priors,
      dataSoFar.alice_actions.concat(alice_action.action_risk)
    ),
    "closeness_A"
  );
  var bob_action = sample(
    comm_actor(scenario, condition.closeness_bob, bob_posterior)
  );

  var newDataSoFar = {
    alice_actions: dataSoFar.alice_actions.concat(alice_action.action_risk),
    bob_actions: dataSoFar.bob_actions.concat(bob_action.action_risk),
    alice_beliefs: dataSoFar.alice_beliefs.concat(alice_posterior.score(condition.closeness_bob)),
    bob_beliefs: dataSoFar.bob_beliefs.concat(bob_posterior.score(condition.closeness_alice))
  };

  if (dataSoFar.alice_actions.length < params.n_rounds) {
    return run(scenario, condition, newDataSoFar);
  } else {
    return {
      data: newDataSoFar,
      condition: condition,
      scenario: scenario
    }; // this is run_output
  }
};

var f = csv.open("output_commweight1.csv");
csv.writeLine(
  "beta,comfort_discount,participant_num,closeness_alice,closeness_bob,round,alice_action,bob_action,alice_beliefs,bob_beliefs",
  f
);

var writeData = function (participant_num, condition, run_output) {
  mapN(function (i) {
    // console.log(run_output.alice_actions)
    // console.log(run_output)
    csv.writeLine(
      [params.beta,
        params.comfort_discount,
        participant_num,
        condition.closeness_alice,
        condition.closeness_bob,
        i,
        run_output.data.alice_actions[i],
        run_output.data.bob_actions[i],
        Math.exp(run_output.data.alice_beliefs[i]),
        Math.exp(run_output.data.bob_beliefs[i])
      ].join(","),
      f
    );
  }, params.n_rounds);
};

var simulate = function (participant_num, condition) {
//   console.log(condition)
  var run_output = run("mac", condition, {
    alice_actions: [],
    bob_actions: [],
    alice_beliefs: [],
    bob_beliefs: []
  });
//   console.log(run_output)
  writeData(participant_num, condition, run_output);
};

var simulateAll = function (participants) {
    mapN(function (participant_num) {
        console.log("participant " + participant_num)
        map(function (condition) {
            simulate(participant_num, condition);
        }, conditions);
    }, participants);
}

simulateAll(params.participants)

csv.close(f)
